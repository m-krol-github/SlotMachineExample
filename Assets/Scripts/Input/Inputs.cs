//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Settings/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Gameplay.Input
{
    public partial class @Inputs : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Inputs()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""Actions"",
            ""id"": ""3feea1b4-bd84-40a0-9869-61008d0ed133"",
            ""actions"": [
                {
                    ""name"": ""Spin"",
                    ""type"": ""Button"",
                    ""id"": ""cc27e9d8-bd91-4493-9b1a-b987115b1225"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""e87e2406-d806-49eb-b521-a5f3ce9df1c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Debug"",
                    ""type"": ""Button"",
                    ""id"": ""3812625a-f48f-4a2a-97e4-d584e7c6df61"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dd62f308-1d24-4fdd-a497-24e724d3ade6"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""699d06d4-7f3e-4b6b-b933-e801986081fc"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96c05c10-4cd5-426a-96c8-5dcbcc392ae6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Debug"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Actions
            m_Actions = asset.FindActionMap("Actions", throwIfNotFound: true);
            m_Actions_Spin = m_Actions.FindAction("Spin", throwIfNotFound: true);
            m_Actions_Restart = m_Actions.FindAction("Restart", throwIfNotFound: true);
            m_Actions_Debug = m_Actions.FindAction("Debug", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Actions
        private readonly InputActionMap m_Actions;
        private IActionsActions m_ActionsActionsCallbackInterface;
        private readonly InputAction m_Actions_Spin;
        private readonly InputAction m_Actions_Restart;
        private readonly InputAction m_Actions_Debug;
        public struct ActionsActions
        {
            private @Inputs m_Wrapper;
            public ActionsActions(@Inputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @Spin => m_Wrapper.m_Actions_Spin;
            public InputAction @Restart => m_Wrapper.m_Actions_Restart;
            public InputAction @Debug => m_Wrapper.m_Actions_Debug;
            public InputActionMap Get() { return m_Wrapper.m_Actions; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ActionsActions set) { return set.Get(); }
            public void SetCallbacks(IActionsActions instance)
            {
                if (m_Wrapper.m_ActionsActionsCallbackInterface != null)
                {
                    @Spin.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnSpin;
                    @Spin.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnSpin;
                    @Spin.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnSpin;
                    @Restart.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnRestart;
                    @Restart.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnRestart;
                    @Restart.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnRestart;
                    @Debug.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnDebug;
                    @Debug.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnDebug;
                    @Debug.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnDebug;
                }
                m_Wrapper.m_ActionsActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Spin.started += instance.OnSpin;
                    @Spin.performed += instance.OnSpin;
                    @Spin.canceled += instance.OnSpin;
                    @Restart.started += instance.OnRestart;
                    @Restart.performed += instance.OnRestart;
                    @Restart.canceled += instance.OnRestart;
                    @Debug.started += instance.OnDebug;
                    @Debug.performed += instance.OnDebug;
                    @Debug.canceled += instance.OnDebug;
                }
            }
        }
        public ActionsActions @Actions => new ActionsActions(this);
        public interface IActionsActions
        {
            void OnSpin(InputAction.CallbackContext context);
            void OnRestart(InputAction.CallbackContext context);
            void OnDebug(InputAction.CallbackContext context);
        }
    }
}
